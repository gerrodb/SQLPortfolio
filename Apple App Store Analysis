# For this project, I downloaded Apple App Store data from Kaggle.
# I then performed analytics on the data using SQL. 


CREATE TABLE appleStore_description_combined AS

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4

-- Check the number of unique apps in both tablesAppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIds
FROM appleStore_description_combined

-- Check for any missing values in key fieldsAppleStore

SELECT COUNT(*) AS MissingValues
FROM AppleStore
WHERE track_name IS NULL or user_rating IS NULL OR prime_genre IS NULL

SELECT COUNT(DISTINCT id) AS UniqueAppIDs
FROM AppleStore
WHERE app_desc IS NULL

-- Find out the number of apps per genreAppleStore

SELECT prime_genre, COUNT(*) AS NumApps
FROM AppleStore
GROUP BY prime_genre
ORDER By NumApps DESC

-- Get an overview of the apps' ratings

SELECT min(user_rating) as MinRating,
	   max(user_rating) AS MaxRating,
       avg(user_rating) AS AvgRating
FROM AppleStore

-- Determine whether paid apps have higher ratings than free appsAppleStore

SELECT CASE
			When price > 0 THEN 'Paid'
            ELSE 'Free'
            END AS App_Type,
            avg(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY App_Type

-- Check if apps with more supported languages have higher ratingsAppleStore

SELECT CASE
			WHEN lang_num < 10 THEN '<10 Languages'
            WHEN lang_num BETWEEN 10 AND 30 THEN '10-30 Languages'
            ELSE '>30 Languages'
            END AS Language_Bucket
FROM AppleStore
GROUP BY Language_Bucket
ORDER BY Avg_Rating DESC

-- Check genres with low ratingsAppleStore

SELECT prime_genre,
	   avg(user_rating) AS Avg_Rating
From AppleStore
GROUP BY prime_genre
Order By Avg_Rating ASC
Limit 10

-- Check if there is correlation between the length of the app description and the user ratingAppleStore

SELECT CASE
			WHEN length(b.app_desc) <500 THEN 'Short'
            WHEN length(b.app_desc) BETWEEN 500 AND 1000 THEN 'Medium'
            ELSE 'Long'
            END AS Description_Length_Bucket,
            avg(a.user_rating) AS average_rating

FROM AppleStore AS A 
JOIN appleStore_description_combined AS B 
ON a.id = b.id 

-- Check the top-rated apps for each genre  

SELECT prime_genre, track_name, user_rating
FROM (
  		SELECT
  		prime_genre,
  		track_name,
  		user_rating,
  		RANK() OVER(PARTITION BY prime_genre ORDER BY user_rating DESC, rating_count_tot DESC) AS rank 
  FROM AppleStore
  	) AS A 
  WHERE 
  A.rank = 1
